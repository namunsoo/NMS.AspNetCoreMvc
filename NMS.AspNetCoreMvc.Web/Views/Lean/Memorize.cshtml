@{
    Layout = "~/Views/Shared/_NoLayout.cshtml";
    ViewData["Title"] = "Memorize Page";
}

<script src="~/lib/Etc/xlsx.core.min.js"></script>
@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            $("#toolbar").kendoToolBar({
                items: [
                    { template: '<a role="button" class="k-button k-button-solid-base k-button-solid k-button-md k-rounded-md" href="#">' + kendo.ui.icon({ icon: 'user' }) + '<span id="badge-overlay">2</span></a>' },
                    { template: '<a role="button" class="k-button k-button-solid-base k-button-solid k-button-md k-rounded-md" href="#">' + kendo.ui.icon({ icon: 'envelop' }) + ' <span id="badge-inbox">5</span></a>' },
                    { template: '<a role="button" class="k-button k-button-solid-base k-button-solid k-button-md k-rounded-md" href="#">암기 완료<span id="badge-sent">15</span></a>' },
                    { template: '<a role="button" class="k-button k-button-solid-base k-button-solid k-button-md k-rounded-md" href="#">암기 중 <span id="badge-missed">99+</span></a>' }
                ]
            });
            // 전체
            // 기준 정하는거
            $('#badge-overlay').kendoBadge({
                themeColor: 'primary',
                rounded: 'small'
            });

            $('#badge-inbox').kendoBadge({
                themeColor: 'info',
                rounded: 'medium'
            });

            $('#badge-sent').kendoBadge({
                themeColor: 'success',
                rounded: 'full'
            });

            $('#badge-missed').kendoBadge({
                themeColor: 'warning',
                rounded: 'large'
            });

            $("#files").kendoUpload({
                async: {
                    chunkSize: 11000,// bytes
                    autoUpload: true
                },
                multiple: false,
                validation: {
                    allowedExtensions: [".xls", ".xlsx"],
                    maxFileSize: 4194304
                },
                select: function () {
                    test()
                }
            });

        });
        // function test() {
        //     var files = $('#files')[0].files[0]; //input file 객체를 가져온다.
        //     var i, f;
        //     var xlsxflag = false; /*Flag for checking whether excel is .xls format or .xlsx format*/
        //     if ($("#files").val().toLowerCase().indexOf(".xlsx") > 0) {
        //         xlsxflag = true;
        //     }
        //     for (i = 0; i != files.length; ++i) {
        //         f = files[i];
        //         var reader = new FileReader(); //FileReader를 생성한다.

        //         //성공적으로 읽기 동작이 완료된 경우 실행되는 이벤트 핸들러를 설정한다.
        //         reader.onload = function (e) {
        //             var data = e.target.result;
        //             /*Converts the excel data in to object*/
        //             if (xlsxflag) {
        //                 var workbook = XLSX.read(data, { type: 'binary' });
        //             }
        //             else {
        //                 var workbook = XLS.read(data, { type: 'binary' });
        //             }
        //             /*Gets all the sheetnames of excel in to a variable*/
        //             var sheet_name_list = workbook.SheetNames;

        //             var cnt = 0; /*This is used for restricting the script to consider only first sheet of excel*/
        //             sheet_name_list.forEach(function (y) { /*Iterate through all sheets*/
        //                 /*Convert the cell value to Json*/
        //                 if (xlsxflag) {
        //                     var exceljson = XLSX.utils.sheet_to_json(workbook.Sheets[y]);
        //                 }
        //                 else {
        //                     var exceljson = XLS.utils.sheet_to_row_object_array(workbook.Sheets[y]);
        //                 }
        //                 if (exceljson.length > 0 && cnt == 0) {
        //                     alert(exceljson);
        //                 }
        //             });
        //         };

        //         //파일객체를 읽는다. 완료되면 원시 이진 데이터가 문자열로 포함됨.
        //         reader.readAsBinaryString(f);

        //     }//end. for
        // }

        $("#files").on("change", function (e) {
            var files = e.target.files; //input file 객체를 가져온다.
            var i, f;
            var xlsxflag = false; /*Flag for checking whether excel is .xls format or .xlsx format*/
            if ($("#files").val().toLowerCase().indexOf(".xlsx") > 0) {
                xlsxflag = true;
            }
            for (i = 0; i != files.length; ++i) {
                f = files[i];
                var reader = new FileReader(); //FileReader를 생성한다.

                //성공적으로 읽기 동작이 완료된 경우 실행되는 이벤트 핸들러를 설정한다.
                reader.onload = function (e) {
                    var data = e.target.result;
                    /*Converts the excel data in to object*/
                    if (xlsxflag) {
                        var workbook = XLSX.read(data, { type: 'binary' });
                    }
                    else {
                        var workbook = XLS.read(data, { type: 'binary' });
                    }
                    /*Gets all the sheetnames of excel in to a variable*/
                    var sheet_name_list = workbook.SheetNames;

                    var cnt = 0; /*This is used for restricting the script to consider only first sheet of excel*/
                    sheet_name_list.forEach(function (y) { /*Iterate through all sheets*/
                        /*Convert the cell value to Json*/
                        if (xlsxflag) {
                            var exceljson = XLSX.utils.sheet_to_json(workbook.Sheets[y]);
                        }
                        else {
                            var exceljson = XLS.utils.sheet_to_row_object_array(workbook.Sheets[y]);
                        }
                        if (exceljson.length > 0 && cnt == 0) {
                            alert(exceljson);
                        }
                    });
                };

                //파일객체를 읽는다. 완료되면 원시 이진 데이터가 문자열로 포함됨.
                reader.readAsBinaryString(f);

            }//end. for

        });

        // $("#files").on("change", function (e) {
        //     var xlsxflag = false; /*Flag for checking whether excel is .xls format or .xlsx format*/
        //     if ($("#files").val().toLowerCase().indexOf(".xlsx") > 0) {
        //         xlsxflag = true;
        //     }
        //     var files = e.target.files; //input file 객체를 가져온다.
        //     var i, f;
        //     for (i = 0; i != files.length; ++i) {
        //         f = files[i];
        //         var reader = new FileReader(); //FileReader를 생성한다.

        //         //성공적으로 읽기 동작이 완료된 경우 실행되는 이벤트 핸들러를 설정한다.
        //         reader.onload = function (e) {
        //             var data = e.target.result;
        //             /*Converts the excel data in to object*/
        //             if (xlsxflag) {
        //                 var workbook = XLSX.read(data, { type: 'binary' });
        //             }
        //             else {
        //                 var workbook = XLS.read(data, { type: 'binary' });
        //             }
        //             /*Gets all the sheetnames of excel in to a variable*/
        //             var sheet_name_list = workbook.SheetNames;

        //             var cnt = 0; /*This is used for restricting the script to consider only first sheet of excel*/
        //             sheet_name_list.forEach(function (y) { /*Iterate through all sheets*/
        //                 /*Convert the cell value to Json*/
        //                 if (xlsxflag) {
        //                     var exceljson = XLSX.utils.sheet_to_json(workbook.Sheets[y]);
        //                 }
        //                 else {
        //                     var exceljson = XLS.utils.sheet_to_row_object_array(workbook.Sheets[y]);
        //                 }
        //                 if (exceljson.length > 0 && cnt == 0) {
        //                     alert(exceljson)
        //                 }
        //             });

        //         };

        //         //파일객체를 읽는다. 완료되면 원시 이진 데이터가 문자열로 포함됨.
        //         reader.readAsBinaryString(f);

        //     }//end. for

        // });


        //# sourceURL=debugScript
    </script>
}

<div>
    <div id="toolbar"></div>
    <input name="files" id="files" type="file" aria-label="files" />
</div>

